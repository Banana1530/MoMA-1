// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// moma_set_logger_level_cpp
void moma_set_logger_level_cpp(int level);
RcppExport SEXP _MoMA_moma_set_logger_level_cpp(SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    moma_set_logger_level_cpp(level);
    return R_NilValue;
END_RCPP
}
// moma_get_logger_level_cpp
int moma_get_logger_level_cpp();
RcppExport SEXP _MoMA_moma_get_logger_level_cpp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(moma_get_logger_level_cpp());
    return rcpp_result_gen;
END_RCPP
}
// moma_log_cpp
void moma_log_cpp(int level, Rcpp::StringVector x);
RcppExport SEXP _MoMA_moma_log_cpp(SEXP levelSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type x(xSEXP);
    moma_log_cpp(level, x);
    return R_NilValue;
END_RCPP
}
// prox_lasso
arma::vec prox_lasso(const arma::vec& x, double l);
RcppExport SEXP _MoMA_prox_lasso(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_lasso(x, l));
    return rcpp_result_gen;
END_RCPP
}
// prox_nnlasso
arma::vec prox_nnlasso(const arma::vec& x, double l);
RcppExport SEXP _MoMA_prox_nnlasso(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_nnlasso(x, l));
    return rcpp_result_gen;
END_RCPP
}
// prox_scad
arma::vec prox_scad(const arma::vec& x, double l, double g);
RcppExport SEXP _MoMA_prox_scad(SEXP xSEXP, SEXP lSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_scad(x, l, g));
    return rcpp_result_gen;
END_RCPP
}
// prox_mcp
arma::vec prox_mcp(const arma::vec& x, double l, double g);
RcppExport SEXP _MoMA_prox_mcp(SEXP xSEXP, SEXP lSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_mcp(x, l, g));
    return rcpp_result_gen;
END_RCPP
}
// mat_norm
double mat_norm(const arma::vec& u, const arma::mat& S_u);
RcppExport SEXP _MoMA_mat_norm(SEXP uSEXP, SEXP S_uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S_u(S_uSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_norm(u, S_u));
    return rcpp_result_gen;
END_RCPP
}
// sfpca
Rcpp::List sfpca(const arma::mat& X, arma::mat Omega_u, arma::mat Omega_v, /* any idea to set up default values for these matrices? */     double alpha_u, double alpha_v, std::string P_u, std::string P_v, double lambda_u, double lambda_v, double gamma, double EPS, long MAX_ITER, std::string solver);
RcppExport SEXP _MoMA_sfpca(SEXP XSEXP, SEXP Omega_uSEXP, SEXP Omega_vSEXP, SEXP alpha_uSEXP, SEXP alpha_vSEXP, SEXP P_uSEXP, SEXP P_vSEXP, SEXP lambda_uSEXP, SEXP lambda_vSEXP, SEXP gammaSEXP, SEXP EPSSEXP, SEXP MAX_ITERSEXP, SEXP solverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_u(Omega_uSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_v(Omega_vSEXP);
    Rcpp::traits::input_parameter< /* any idea to set up default values for these matrices? */     double >::type alpha_u(alpha_uSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_v(alpha_vSEXP);
    Rcpp::traits::input_parameter< std::string >::type P_u(P_uSEXP);
    Rcpp::traits::input_parameter< std::string >::type P_v(P_vSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_u(lambda_uSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_v(lambda_vSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< long >::type MAX_ITER(MAX_ITERSEXP);
    Rcpp::traits::input_parameter< std::string >::type solver(solverSEXP);
    rcpp_result_gen = Rcpp::wrap(sfpca(X, Omega_u, Omega_v, alpha_u, alpha_v, P_u, P_v, lambda_u, lambda_v, gamma, EPS, MAX_ITER, solver));
    return rcpp_result_gen;
END_RCPP
}
// test_norm
double test_norm(arma::vec x);
RcppExport SEXP _MoMA_test_norm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_norm(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MoMA_moma_set_logger_level_cpp", (DL_FUNC) &_MoMA_moma_set_logger_level_cpp, 1},
    {"_MoMA_moma_get_logger_level_cpp", (DL_FUNC) &_MoMA_moma_get_logger_level_cpp, 0},
    {"_MoMA_moma_log_cpp", (DL_FUNC) &_MoMA_moma_log_cpp, 2},
    {"_MoMA_prox_lasso", (DL_FUNC) &_MoMA_prox_lasso, 2},
    {"_MoMA_prox_nnlasso", (DL_FUNC) &_MoMA_prox_nnlasso, 2},
    {"_MoMA_prox_scad", (DL_FUNC) &_MoMA_prox_scad, 3},
    {"_MoMA_prox_mcp", (DL_FUNC) &_MoMA_prox_mcp, 3},
    {"_MoMA_mat_norm", (DL_FUNC) &_MoMA_mat_norm, 2},
    {"_MoMA_sfpca", (DL_FUNC) &_MoMA_sfpca, 13},
    {"_MoMA_test_norm", (DL_FUNC) &_MoMA_test_norm, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MoMA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
